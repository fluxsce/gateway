import{b as Q,r as b,f as ue,g as F,d as de,cT as Te,dk as pe,W as we,ag as c,ac as Y,a7 as W,a3 as N,I as h,v as m,cQ as L,D as me,h as ve,c as ge,o as fe,a as n,m as o,n as e,w as r,E as U,cU as le,J as A,ao as be,_ as Ce,dl as q,V as O,x as P,al as M}from"./index-x2UIW6rt.js";import{S as ie}from"./StopCircleOutline-CEO76SI5.js";import{P as G}from"./PlayOutline-_yQt-ieg.js";import{R as Se}from"./ReloadOutline-DeaP78U7.js";import{T as ye}from"./TimeOutline-gKcJIzPg.js";import{P as Ie,L as xe}from"./PencilOutline-D_QOGCBS.js";import{T as re}from"./TrashOutline-BVFrNGkO.js";import{R as he}from"./RefreshOutline-ClIKSIMl.js";import{A as ke}from"./AddOutline-CGjDgn0r.js";import{N as De}from"./Popconfirm-bPhIDBu0.js";import{_ as Pe}from"./RadioGroup-DcXP1pnc.js";import{_ as Ne}from"./DataTable-BPEIkg8T.js";import{P as $e}from"./PieChartOutline-Bm6garfx.js";import{S as ze}from"./SpeedometerOutline-CdS8pbm_.js";import{a as E,_ as ce}from"./Grid-DN5dJWuI.js";var H=(t=>(t.CONNECTED="connected",t.DISCONNECTED="disconnected",t.CONNECTING="connecting",t.ERROR="error",t))(H||{});async function Oe(t){return new Promise(u=>{setTimeout(()=>{let d=[{tunnelClientId:"client-001",tenantId:"default-tenant-001",userId:"user-001",clientName:"WebServer-Client",clientDescription:"Web服务器隧道客户端",clientVersion:"0.44.0",operatingSystem:"Linux Ubuntu 20.04",clientIpAddress:"192.168.1.100",clientMacAddress:"00:1B:44:11:3A:B7",serverAddress:"tunnel.example.com",serverPort:7e3,authToken:"frp-client-token-123456",tlsEnable:"Y",autoReconnect:"Y",maxRetries:5,retryInterval:20,heartbeatInterval:30,heartbeatTimeout:90,connectionStatus:H.CONNECTED,lastConnectTime:"2024-01-15 10:30:00",lastDisconnectTime:"2024-01-15 09:15:00",totalConnectTime:18e3,reconnectCount:3,serviceCount:2,lastHeartbeat:"2024-01-15 14:29:30",clientConfig:'{"admin_addr":"127.0.0.1","admin_port":7400}',addTime:"2024-01-15 09:00:00",addWho:"admin",editTime:"2024-01-15 10:30:00",editWho:"admin",oprSeqFlag:"client-001",currentVersion:1,activeFlag:"Y",noteText:"Web服务器专用客户端"},{tunnelClientId:"client-002",tenantId:"default-tenant-001",userId:"user-002",clientName:"DatabaseServer-Client",clientDescription:"数据库服务器隧道客户端",clientVersion:"0.44.0",operatingSystem:"Windows Server 2019",clientIpAddress:"192.168.1.101",clientMacAddress:"00:1B:44:11:3A:B8",serverAddress:"tunnel.example.com",serverPort:7e3,authToken:"frp-client-token-789012",tlsEnable:"N",autoReconnect:"Y",maxRetries:3,retryInterval:30,heartbeatInterval:30,heartbeatTimeout:90,connectionStatus:H.DISCONNECTED,lastConnectTime:"2024-01-15 08:30:00",lastDisconnectTime:"2024-01-15 14:00:00",totalConnectTime:19800,reconnectCount:1,serviceCount:1,lastHeartbeat:"2024-01-15 13:59:30",addTime:"2024-01-15 08:00:00",addWho:"admin",editTime:"2024-01-15 08:30:00",editWho:"admin",oprSeqFlag:"client-002",currentVersion:1,activeFlag:"Y",noteText:"数据库服务器专用客户端"}];t.clientName&&(d=d.filter(p=>p.clientName.toLowerCase().includes(t.clientName.toLowerCase()))),t.connectionStatus&&(d=d.filter(p=>p.connectionStatus===t.connectionStatus)),t.userId&&(d=d.filter(p=>p.userId===t.userId));const w=(t.pageIndex-1)*t.pageSize,y=w+t.pageSize,S=d.slice(w,y);u({success:!0,data:S,total:d.length})},500)})}async function Ae(t){return new Promise(u=>{setTimeout(()=>{const v={tunnelClientId:`client-${Date.now()}`,tenantId:"default-tenant-001",...t,connectionStatus:H.DISCONNECTED,totalConnectTime:0,reconnectCount:0,serviceCount:0,addTime:new Date().toISOString(),addWho:"current-user",editTime:new Date().toISOString(),editWho:"current-user",oprSeqFlag:`create-${Date.now()}`,currentVersion:1,activeFlag:"Y"};u({success:!0,data:v,message:"隧道客户端创建成功"})},800)})}async function Re(t,u){return new Promise(v=>{setTimeout(()=>{const d={tunnelClientId:t,tenantId:"default-tenant-001",...u,connectionStatus:H.CONNECTED,totalConnectTime:18e3,reconnectCount:3,serviceCount:2,addTime:"2024-01-15 09:00:00",addWho:"admin",editTime:new Date().toISOString(),editWho:"current-user",oprSeqFlag:`update-${Date.now()}`,currentVersion:2,activeFlag:"Y"};v({success:!0,data:d,message:"隧道客户端更新成功"})},800)})}async function Ee(t){return new Promise(u=>{setTimeout(()=>{u({success:!0,message:"隧道客户端删除成功"})},500)})}async function Ve(t){return new Promise(u=>{setTimeout(()=>{u({success:!0,successCount:t.length,failureCount:0,details:t.map(v=>({clientId:v,success:!0}))})},800)})}async function Be(t){return new Promise(u=>{setTimeout(()=>{u({success:Math.random()>.2,message:Math.random()>.2?"客户端连接成功":"客户端连接失败：服务器不可达"})},2e3)})}async function Fe(t){return new Promise(u=>{setTimeout(()=>{u({success:!0,message:"客户端断开成功"})},800)})}async function He(t){return new Promise(u=>{setTimeout(()=>{u({success:Math.random()>.3,message:Math.random()>.3?"客户端重连成功":"客户端重连失败"})},3e3)})}async function We(){return new Promise(t=>{setTimeout(()=>{t({success:!0,data:{totalClients:2,connectedClients:1,disconnectedClients:1,errorClients:0,totalServices:3,totalConnections:156,averageConnectTime:18900,totalReconnects:4}})},300)})}async function Me(t,u=1,v=20){return new Promise(d=>{setTimeout(()=>{const w=[{historyId:"history-001",tunnelClientId:t,connectionType:"connect",eventTime:"2024-01-15 10:30:00",clientIpAddress:"192.168.1.100",serverAddress:"tunnel.example.com",serverPort:7e3,duration:18e6,eventDetails:'{"version":"0.44.0","os":"Linux"}'},{historyId:"history-002",tunnelClientId:t,connectionType:"disconnect",eventTime:"2024-01-15 09:15:00",clientIpAddress:"192.168.1.100",serverAddress:"tunnel.example.com",serverPort:7e3,duration:15e6,eventDetails:'{"reason":"manual"}'}];d({success:!0,data:w,total:w.length})},400)})}async function Ye(t){return new Promise(u=>{setTimeout(()=>{const v=[{serviceId:"service-001",serviceName:"web-service",serviceType:"http",localAddress:"127.0.0.1",localPort:80,remotePort:8080,customDomains:["example.com"],serviceStatus:"active",connectionCount:5,totalConnections:128,totalTraffic:1048576},{serviceId:"service-002",serviceName:"ssh-service",serviceType:"tcp",localAddress:"127.0.0.1",localPort:22,remotePort:2222,serviceStatus:"active",connectionCount:2,totalConnections:28,totalTraffic:524288}];u({success:!0,data:v,total:v.length})},400)})}async function Ue(){return new Promise(t=>{setTimeout(()=>{t({success:!0,data:[{templateId:"template-001",templateName:"标准Web服务模板",templateDescription:"适用于Web服务的标准配置模板",serverAddress:"tunnel.example.com",serverPort:7e3,authToken:"your-auth-token",tlsEnable:"Y",heartbeatInterval:30,heartbeatTimeout:90,autoReconnect:"Y",maxRetries:5,retryInterval:20,configContent:`[common]
server_addr = tunnel.example.com
server_port = 7000
auth_token = your-auth-token
tls_enable = true
admin_addr = 127.0.0.1
admin_port = 7400

[web]
type = http
local_ip = 127.0.0.1
local_port = 80
custom_domains = example.com`}]})},300)})}async function qe(t){return new Promise(u=>{setTimeout(()=>{const v=`[common]
server_addr = tunnel.example.com
server_port = 7000
auth_token = frp-client-token-123456
tls_enable = true
admin_addr = 127.0.0.1
admin_port = 7400

# 自动生成的配置，客户端ID: ${t}
# 生成时间: ${new Date().toISOString()}`;u({success:!0,config:v,message:"客户端配置生成成功"})},500)})}function _e(){const t=Q(),u=b(!1),v=b(!1),d=b([]),w=b(0),y=b([]),S=b({totalClients:0,connectedClients:0,disconnectedClients:0,errorClients:0,totalServices:0,totalConnections:0,averageConnectTime:0,totalReconnects:0}),p=ue({tenantId:"default-tenant-001",userId:"",clientName:"",connectionStatus:void 0,clientIpAddress:"",serverAddress:"",operatingSystem:"",activeFlag:"Y",pageIndex:1,pageSize:20}),C=[{label:"已连接",value:"connected"},{label:"已断开",value:"disconnected"},{label:"连接中",value:"connecting"},{label:"错误",value:"error"}],x=[{label:"启用",value:"Y"},{label:"禁用",value:"N"}],$=[{label:"启用",value:"Y"},{label:"禁用",value:"N"}],k=F(()=>y.value.length>0),V=F(()=>y.value.length>0),B=F(()=>y.value.length>0),R=F(()=>y.value.length>0),_=async()=>{try{u.value=!0;const i=await Oe(p);i.success?(d.value=i.data,w.value=i.total):t.error(i.message||"获取隧道客户端列表失败")}catch(i){console.error("获取隧道客户端列表失败:",i),t.error("获取隧道客户端列表失败")}finally{u.value=!1}},f=async()=>{try{const i=await We();i.success&&(S.value=i.data)}catch(i){console.error("获取统计信息失败:",i)}};return{loading:u,submitting:v,tunnelClients:d,total:w,selectedClientIds:y,statistics:S,queryParams:p,connectionStatusOptions:C,tlsOptions:x,autoReconnectOptions:$,hasSelection:k,canBatchDelete:V,canBatchConnect:B,canBatchDisconnect:R,getTunnelClients:_,getStatistics:f,createTunnelClient:async i=>{try{v.value=!0;const l=await Ae(i);return l.success?(t.success(l.message||"隧道客户端创建成功"),await _(),await f(),!0):(t.error(l.message||"创建隧道客户端失败"),!1)}catch(l){return console.error("创建隧道客户端失败:",l),t.error("创建隧道客户端失败"),!1}finally{v.value=!1}},updateTunnelClient:async(i,l)=>{try{v.value=!0;const D=await Re(i,l);return D.success?(t.success(D.message||"隧道客户端更新成功"),await _(),!0):(t.error(D.message||"更新隧道客户端失败"),!1)}catch(D){return console.error("更新隧道客户端失败:",D),t.error("更新隧道客户端失败"),!1}finally{v.value=!1}},deleteTunnelClient:async i=>{try{const l=await Ee(i);return l.success?(t.success(l.message||"隧道客户端删除成功"),await _(),await f(),!0):(t.error(l.message||"删除隧道客户端失败"),!1)}catch(l){return console.error("删除隧道客户端失败:",l),t.error("删除隧道客户端失败"),!1}},batchDeleteTunnelClients:async()=>{if(y.value.length===0)return t.warning("请选择要删除的隧道客户端"),!1;try{const i=await Ve(y.value);return i.success?(t.success(`成功删除 ${i.successCount} 个客户端`),y.value=[],await _(),await f(),!0):(t.error("批量删除失败"),!1)}catch(i){return console.error("批量删除失败:",i),t.error("批量删除失败"),!1}},connectTunnelClient:async i=>{try{const l=await Be(i);return l.success?(t.success(l.message),await _(),await f(),!0):(t.error(l.message||"连接失败"),!1)}catch(l){return console.error("连接隧道客户端失败:",l),t.error("连接隧道客户端失败"),!1}},disconnectTunnelClient:async i=>{try{const l=await Fe(i);return l.success?(t.success(l.message),await _(),await f(),!0):(t.error(l.message||"断开失败"),!1)}catch(l){return console.error("断开隧道客户端失败:",l),t.error("断开隧道客户端失败"),!1}},reconnectTunnelClient:async i=>{try{const l=await He(i);return l.success?(t.success(l.message),await _(),await f(),!0):(t.error(l.message||"重连失败"),!1)}catch(l){return console.error("重连隧道客户端失败:",l),t.error("重连隧道客户端失败"),!1}},getConnectionHistory:async(i,l=1,D=20)=>{try{const z=await Me(i,l,D);return z.success?{data:z.data,total:z.total}:(t.error("获取连接历史失败"),{data:[],total:0})}catch(z){return console.error("获取连接历史失败:",z),t.error("获取连接历史失败"),{data:[],total:0}}},getClientServices:async i=>{try{const l=await Ye(i);return l.success?l.data:(t.error("获取客户端服务失败"),[])}catch(l){return console.error("获取客户端服务失败:",l),t.error("获取客户端服务失败"),[]}},getConfigTemplates:async()=>{try{const i=await Ue();return i.success?i.data:(t.error("获取配置模板失败"),[])}catch(i){return console.error("获取配置模板失败:",i),t.error("获取配置模板失败"),[]}},generateClientConfig:async i=>{try{const l=await qe(i);return l.success?(t.success(l.message||"配置生成成功"),l.config):(t.error("生成配置失败"),null)}catch(l){return console.error("生成配置失败:",l),t.error("生成配置失败"),null}},resetQuery:()=>{p.userId="",p.clientName="",p.connectionStatus=void 0,p.clientIpAddress="",p.serverAddress="",p.operatingSystem="",p.pageIndex=1,p.pageSize=20},refresh:async()=>{await Promise.all([_(),f()])}}}const Le={class:"tunnel-client-table"},Ge={class:"table-header"},Qe={class:"search-section"},Je={class:"action-section"},Ke=de({__name:"TunnelClientTable",props:{onEdit:{type:Function},onCreate:{type:Function},onViewHistory:{type:Function},onViewServices:{type:Function},onGenerateConfig:{type:Function}},emits:["edit","create","viewHistory","viewServices","generateConfig"],setup(t,{emit:u}){const v=u;Q();const d=Te(),{loading:w,tunnelClients:y,total:S,selectedClientIds:p,queryParams:C,connectionStatusOptions:x,hasSelection:$,getTunnelClients:k,deleteTunnelClient:V,batchDeleteTunnelClients:B,connectTunnelClient:R,disconnectTunnelClient:_,reconnectTunnelClient:f,resetQuery:a}=_e(),I=ue({page:1,pageSize:20,showSizePicker:!0,pageSizes:[10,20,50,100],onChange:s=>{C.pageIndex=s,k()},onUpdatePageSize:s=>{C.pageSize=s,C.pageIndex=1,k()},itemCount:S.value,prefix:({itemCount:s})=>`共 ${s} 条记录`}),J=F(()=>[{type:"selection"},{title:"客户端名称",key:"clientName",width:160,ellipsis:{tooltip:!0}},{title:"连接状态",key:"connectionStatus",width:100,render:s=>{const T={connected:{type:"success",text:"已连接"},disconnected:{type:"warning",text:"已断开"},connecting:{type:"info",text:"连接中"},error:{type:"error",text:"错误"}}[s.connectionStatus]||{type:"default",text:"未知"};return c(Y,{type:T.type},{default:()=>T.text})}},{title:"客户端IP",key:"clientIpAddress",width:130,render:s=>s.clientIpAddress||"-"},{title:"服务器地址",key:"server",width:160,render:s=>`${s.serverAddress}:${s.serverPort}`},{title:"系统信息",key:"system",width:140,render:s=>c("div",{style:{fontSize:"12px"}},[c("div",s.operatingSystem||"-"),c("div",{style:{color:"#999"}},`v${s.clientVersion||"unknown"}`)])},{title:"配置",key:"config",width:120,render:s=>c(W,{size:4,vertical:!0},{default:()=>[s.tlsEnable==="Y"&&c(Y,{type:"success",size:"small"},{default:()=>"TLS"}),s.autoReconnect==="Y"&&c(Y,{type:"info",size:"small"},{default:()=>"自动重连"})].filter(Boolean)})},{title:"服务数量",key:"serviceCount",width:80,render:s=>s.serviceCount||0},{title:"重连次数",key:"reconnectCount",width:80,render:s=>s.reconnectCount||0},{title:"连接时长",key:"totalConnectTime",width:120,render:s=>pe((s.totalConnectTime||0)*1e3)},{title:"最后心跳",key:"lastHeartbeat",width:150,render:s=>s.lastHeartbeat?we(s.lastHeartbeat):"-"},{title:"操作",key:"actions",width:320,fixed:"right",render:s=>c(W,{size:4},{default:()=>[s.connectionStatus==="connected"?c(N,{trigger:"hover"},{trigger:()=>c(h,{size:"small",type:"warning",secondary:!0,onClick:()=>se(s)},{icon:()=>c(m,{component:ie}),default:()=>"断开"}),default:()=>"断开连接"}):c(N,{trigger:"hover"},{trigger:()=>c(h,{size:"small",type:"success",secondary:!0,onClick:()=>ne(s)},{icon:()=>c(m,{component:G}),default:()=>"连接"}),default:()=>"建立连接"}),c(N,{trigger:"hover"},{trigger:()=>c(h,{size:"small",type:"info",secondary:!0,onClick:()=>oe(s)},{icon:()=>c(m,{component:Se}),default:()=>"重连"}),default:()=>"重新连接"}),c(N,{trigger:"hover"},{trigger:()=>c(h,{size:"small",type:"primary",secondary:!0,onClick:()=>D(s)},{icon:()=>c(m,{component:L}),default:()=>"服务"}),default:()=>"查看服务"}),c(N,{trigger:"hover"},{trigger:()=>c(h,{size:"small",type:"info",ghost:!0,onClick:()=>l(s)},{icon:()=>c(m,{component:ye})}),default:()=>"连接历史"}),c(N,{trigger:"hover"},{trigger:()=>c(h,{size:"small",type:"default",ghost:!0,onClick:()=>z(s)},{icon:()=>c(m,{component:me})}),default:()=>"生成配置"}),c(N,{trigger:"hover"},{trigger:()=>c(h,{size:"small",type:"primary",ghost:!0,onClick:()=>Z(s)},{icon:()=>c(m,{component:Ie})}),default:()=>"编辑客户端"}),c(De,{onPositiveClick:()=>ee(s)},{trigger:()=>c(N,{trigger:"hover"},{trigger:()=>c(h,{size:"small",type:"error",ghost:!0},{icon:()=>c(m,{component:re})}),default:()=>"删除客户端"}),default:()=>"确认删除这个隧道客户端吗？"})]})}]),K=()=>{C.pageIndex=1,k()},j=()=>{a(),k()},X=()=>{v("create")},Z=s=>{v("edit",s)},ee=async s=>{await V(s.tunnelClientId)},te=()=>{d.warning({title:"确认批量删除",content:`确认删除选中的 ${p.value.length} 个隧道客户端吗？`,positiveText:"确认删除",negativeText:"取消",onPositiveClick:async()=>{await B()}})},ne=async s=>{await R(s.tunnelClientId)},se=async s=>{await _(s.tunnelClientId)},oe=async s=>{await f(s.tunnelClientId)},ae=()=>{d.info({title:"批量连接",content:`确认连接选中的 ${p.value.length} 个客户端吗？`,positiveText:"确认连接",negativeText:"取消",onPositiveClick:async()=>{for(const s of p.value)await R(s)}})},i=()=>{d.warning({title:"批量断开",content:`确认断开选中的 ${p.value.length} 个客户端吗？`,positiveText:"确认断开",negativeText:"取消",onPositiveClick:async()=>{for(const s of p.value)await _(s)}})},l=s=>{v("viewHistory",s)},D=s=>{v("viewServices",s)},z=s=>{v("generateConfig",s)};return ve(()=>{k()}),(s,g)=>(fe(),ge("div",Le,[n("div",Ge,[n("div",Qe,[o(e(W),{size:16},{default:r(()=>[o(e(U),{value:e(C).clientName,"onUpdate:value":g[0]||(g[0]=T=>e(C).clientName=T),placeholder:"搜索客户端名称",clearable:"",style:{width:"200px"}},{prefix:r(()=>[o(e(m),{component:e(le)},null,8,["component"])]),_:1},8,["value"]),o(e(Pe),{value:e(C).connectionStatus,"onUpdate:value":g[1]||(g[1]=T=>e(C).connectionStatus=T),placeholder:"连接状态",clearable:"",style:{width:"120px"},options:e(x)},null,8,["value","options"]),o(e(U),{value:e(C).clientIpAddress,"onUpdate:value":g[2]||(g[2]=T=>e(C).clientIpAddress=T),placeholder:"客户端IP",clearable:"",style:{width:"140px"}},null,8,["value"]),o(e(U),{value:e(C).serverAddress,"onUpdate:value":g[3]||(g[3]=T=>e(C).serverAddress=T),placeholder:"服务器地址",clearable:"",style:{width:"150px"}},null,8,["value"])]),_:1})]),n("div",Je,[o(e(W),{size:12},{default:r(()=>[o(e(h),{onClick:K,type:"primary"},{icon:r(()=>[o(e(m),{component:e(le)},null,8,["component"])]),default:r(()=>[g[5]||(g[5]=A(" 搜索 "))]),_:1}),o(e(h),{onClick:j},{icon:r(()=>[o(e(m),{component:e(he)},null,8,["component"])]),default:r(()=>[g[6]||(g[6]=A(" 重置 "))]),_:1}),o(e(h),{onClick:X,type:"primary"},{icon:r(()=>[o(e(m),{component:e(ke)},null,8,["component"])]),default:r(()=>[g[7]||(g[7]=A(" 新增客户端 "))]),_:1}),o(e(h),{onClick:ae,disabled:!e($),type:"success",secondary:""},{icon:r(()=>[o(e(m),{component:e(G)},null,8,["component"])]),default:r(()=>[g[8]||(g[8]=A(" 批量连接 "))]),_:1},8,["disabled"]),o(e(h),{onClick:i,disabled:!e($),type:"warning",secondary:""},{icon:r(()=>[o(e(m),{component:e(ie)},null,8,["component"])]),default:r(()=>[g[9]||(g[9]=A(" 批量断开 "))]),_:1},8,["disabled"]),o(e(h),{onClick:te,disabled:!e($),type:"error",secondary:""},{icon:r(()=>[o(e(m),{component:e(re)},null,8,["component"])]),default:r(()=>[g[10]||(g[10]=A(" 批量删除 "))]),_:1},8,["disabled"])]),_:1})])]),o(e(Ne),{columns:J.value,data:e(y),loading:e(w),pagination:I,"row-key":T=>T.tunnelClientId,"checked-row-keys":e(p),"onUpdate:checkedRowKeys":g[4]||(g[4]=T=>be(p)?p.value=T:null),"scroll-x":1600,striped:"","flex-height":"",style:{height:"calc(100vh - 280px)"}},null,8,["columns","data","loading","pagination","row-key","checked-row-keys"])]))}}),je=Ce(Ke,[["__scopeId","data-v-f2d19244"]]),Xe={class:"tunnel-client-management"},Ze={class:"page-header"},et={class:"header-content"},tt={class:"header-title"},nt={class:"header-actions"},st={class:"stats-section"},ot={class:"stat-content"},at={class:"stat-icon total"},lt={class:"stat-info"},it={class:"stat-value"},rt={class:"stat-content"},ct={class:"stat-icon connected"},ut={class:"stat-info"},dt={class:"stat-value"},pt={class:"stat-content"},mt={class:"stat-icon services"},vt={class:"stat-info"},gt={class:"stat-value"},ft={class:"stat-content"},Ct={class:"stat-icon connections"},yt={class:"stat-info"},ht={class:"stat-value"},_t={class:"card-header"},Tt={class:"status-distribution"},wt={class:"status-item"},bt={class:"status-count"},St={class:"status-item"},It={class:"status-count"},xt={class:"status-item"},kt={class:"status-count"},Dt={class:"card-header"},Pt={class:"performance-stats"},Nt={class:"perf-item"},$t={class:"perf-value"},zt={class:"perf-item"},Ot={class:"perf-value"},At={class:"main-content"},Rt={style:{"text-align":"center",padding:"40px"}},Et={style:{"text-align":"center",padding:"40px"}},Vt={style:{"text-align":"center",padding:"40px"}},Bt={style:{"text-align":"center",padding:"40px"}},Ft=de({__name:"TunnelClientManagement",setup(t){const u=Q(),{loading:v,statistics:d,refresh:w}=_e(),y=b(!1),S=b(!1),p=b(!1),C=b(!1),x=b(null),$=()=>{x.value=null,y.value=!0},k=f=>{x.value=f,y.value=!0},V=f=>{x.value=f,S.value=!0},B=f=>{x.value=f,p.value=!0},R=f=>{x.value=f,C.value=!0},_=async()=>{await w(),u.success("数据刷新成功")};return ve(()=>{w()}),(f,a)=>(fe(),ge("div",Xe,[n("div",Ze,[n("div",et,[n("div",tt,[o(e(m),{size:"24",color:"#2080f0"},{default:r(()=>[o(e(q))]),_:1}),a[4]||(a[4]=n("h1",null,"隧道客户端管理",-1))]),a[5]||(a[5]=n("div",{class:"header-description"}," 管理FRP隧道客户端连接，包括连接状态监控、配置管理、服务管理等 ",-1))]),n("div",nt,[o(e(h),{onClick:_,loading:e(v)},{icon:r(()=>[o(e(m),{component:e(he)},null,8,["component"])]),default:r(()=>[a[6]||(a[6]=A(" 刷新 "))]),_:1},8,["loading"])])]),n("div",st,[o(e(ce),{cols:4,"x-gap":16,"y-gap":16},{default:r(()=>[o(e(E),null,{default:r(()=>[o(e(O),{class:"stat-card",hoverable:""},{default:r(()=>[n("div",ot,[n("div",at,[o(e(m),{size:"28",component:e(q)},null,8,["component"])]),n("div",lt,[n("div",it,P(e(d).totalClients),1),a[7]||(a[7]=n("div",{class:"stat-label"},"总客户端数",-1))])])]),_:1})]),_:1}),o(e(E),null,{default:r(()=>[o(e(O),{class:"stat-card",hoverable:""},{default:r(()=>[n("div",rt,[n("div",ct,[o(e(m),{size:"28",component:e(G)},null,8,["component"])]),n("div",ut,[n("div",dt,P(e(d).connectedClients),1),a[8]||(a[8]=n("div",{class:"stat-label"},"已连接",-1))])])]),_:1})]),_:1}),o(e(E),null,{default:r(()=>[o(e(O),{class:"stat-card",hoverable:""},{default:r(()=>[n("div",pt,[n("div",mt,[o(e(m),{size:"28",component:e(L)},null,8,["component"])]),n("div",vt,[n("div",gt,P(e(d).totalServices),1),a[9]||(a[9]=n("div",{class:"stat-label"},"总服务数",-1))])])]),_:1})]),_:1}),o(e(E),null,{default:r(()=>[o(e(O),{class:"stat-card",hoverable:""},{default:r(()=>[n("div",ft,[n("div",Ct,[o(e(m),{size:"28",component:e(xe)},null,8,["component"])]),n("div",yt,[n("div",ht,P(e(d).totalConnections),1),a[10]||(a[10]=n("div",{class:"stat-label"},"总连接数",-1))])])]),_:1})]),_:1})]),_:1}),o(e(ce),{cols:2,"x-gap":16,style:{"margin-top":"16px"}},{default:r(()=>[o(e(E),null,{default:r(()=>[o(e(O),{class:"detail-card",hoverable:""},{header:r(()=>[n("div",_t,[o(e(m),{size:"20",component:e($e)},null,8,["component"]),a[11]||(a[11]=n("span",null,"连接状态分布",-1))])]),default:r(()=>[n("div",Tt,[n("div",wt,[a[12]||(a[12]=n("div",{class:"status-indicator connected"},null,-1)),a[13]||(a[13]=n("span",{class:"status-label"},"已连接",-1)),n("span",bt,P(e(d).connectedClients),1)]),n("div",St,[a[14]||(a[14]=n("div",{class:"status-indicator disconnected"},null,-1)),a[15]||(a[15]=n("span",{class:"status-label"},"已断开",-1)),n("span",It,P(e(d).disconnectedClients),1)]),n("div",xt,[a[16]||(a[16]=n("div",{class:"status-indicator error"},null,-1)),a[17]||(a[17]=n("span",{class:"status-label"},"错误",-1)),n("span",kt,P(e(d).errorClients),1)])])]),_:1})]),_:1}),o(e(E),null,{default:r(()=>[o(e(O),{class:"detail-card",hoverable:""},{header:r(()=>[n("div",Dt,[o(e(m),{size:"20",component:e(ze)},null,8,["component"]),a[18]||(a[18]=n("span",null,"性能统计",-1))])]),default:r(()=>[n("div",Pt,[n("div",Nt,[a[19]||(a[19]=n("div",{class:"perf-label"},"平均连接时长",-1)),n("div",$t,P(e(pe)(e(d).averageConnectTime*1e3)),1)]),n("div",zt,[a[20]||(a[20]=n("div",{class:"perf-label"},"总重连次数",-1)),n("div",Ot,P(e(d).totalReconnects),1)])])]),_:1})]),_:1})]),_:1})]),n("div",At,[o(e(O),{bordered:!1,class:"content-card"},{default:r(()=>[o(je,{onCreate:$,onEdit:k,onViewHistory:V,onViewServices:B,onGenerateConfig:R})]),_:1})]),o(e(M),{show:y.value,"onUpdate:show":a[0]||(a[0]=I=>y.value=I),style:{width:"800px"},preset:"card",title:"客户端配置"},{default:r(()=>[n("div",Rt,[o(e(m),{size:"48",color:"#d9d9d9",component:e(q)},null,8,["component"]),a[21]||(a[21]=n("div",{style:{"margin-top":"16px",color:"#999"}}," 客户端配置对话框开发中... ",-1))])]),_:1},8,["show"]),o(e(M),{show:S.value,"onUpdate:show":a[1]||(a[1]=I=>S.value=I),style:{width:"900px"},preset:"card",title:"连接历史"},{default:r(()=>[n("div",Et,[o(e(m),{size:"48",color:"#d9d9d9",component:e(ye)},null,8,["component"]),a[22]||(a[22]=n("div",{style:{"margin-top":"16px",color:"#999"}}," 连接历史对话框开发中... ",-1))])]),_:1},8,["show"]),o(e(M),{show:p.value,"onUpdate:show":a[2]||(a[2]=I=>p.value=I),style:{width:"1000px"},preset:"card",title:"客户端服务"},{default:r(()=>[n("div",Vt,[o(e(m),{size:"48",color:"#d9d9d9",component:e(L)},null,8,["component"]),a[23]||(a[23]=n("div",{style:{"margin-top":"16px",color:"#999"}}," 客户端服务对话框开发中... ",-1))])]),_:1},8,["show"]),o(e(M),{show:C.value,"onUpdate:show":a[3]||(a[3]=I=>C.value=I),style:{width:"800px"},preset:"card",title:"客户端配置"},{default:r(()=>[n("div",Bt,[o(e(m),{size:"48",color:"#d9d9d9",component:e(me)},null,8,["component"]),a[24]||(a[24]=n("div",{style:{"margin-top":"16px",color:"#999"}}," 配置生成对话框开发中... ",-1))])]),_:1},8,["show"])]))}}),tn=Ce(Ft,[["__scopeId","data-v-0dd71991"]]);export{tn as default};
