const e={title:"Service Registry Management",pageTitle:"Service Registry Center",subtitle:"Manage services and service instances registered by third-party applications",menu:{serviceRegistry:"Service Registry Management",serviceList:"Service List",instanceList:"Instance List"},searchServiceName:"Search service name",selectProtocol:"Select protocol",selectStatus:"Select status",basicInfo:"Basic Information",serviceDetail:"Service Details",instanceList:"Instance List",healthCheckConfig:"Health Check Configuration",noServices:"No service data",noDescription:"No description",serviceNotFound:"Service not found",serviceName:"Service Name",serviceDescription:"Service Description",healthCheckUrl:"Health Check URL",healthCheckInterval:"Health Check Interval",healthCheckTimeout:"Health Check Timeout",healthCheckType:"Health Check Type",healthCheckMode:"Health Check Mode",selectHealthCheckType:"Please select health check type",selectHealthCheckMode:"Please select health check mode",lastUpdateTime:"Last Update Time",instanceId:"Instance ID",instanceCount:"Instance Count",healthyCount:"Healthy Count",instances:"Instances",healthRate:"Health Rate",totalInstances:"Total Instances",healthyInstances:"Healthy Instances",serviceHealth:"Service Health",serviceGroup:"Service Group",namespace:"Namespace",port:"Port",weight:"Weight",lastHeartbeat:"Last Heartbeat",roundRobin:"Round Robin",weightedRoundRobin:"Weighted Round Robin",leastConnections:"Least Connections",random:"Random",ipHash:"IP Hash",viewDetail:"View Details",viewMetadata:"View Metadata",refreshService:"Refresh Service",refreshInstances:"Refresh Instances",fetchServicesFailed:"Failed to fetch service list",fetchDetailFailed:"Failed to fetch service details",fetchMetadataFailed:"Failed to fetch metadata",refreshServiceSuccess:"Refresh service successful",refreshServiceFailed:"Refresh service failed",refreshInstancesSuccess:"Refresh instances successful",refreshInstancesFailed:"Refresh instances failed",healthCheckSuccess:"Health check completed",healthCheckFailed:"Health check failed",bringUpSuccess:"Instance brought up successfully",bringUpFailed:"Failed to bring up instance",takeDownSuccess:"Instance taken down successfully",takeDownFailed:"Failed to take down instance",healthy:"Healthy",unhealthy:"Unhealthy",unknown:"Unknown",addService:"Add Service",editService:"Edit Service",addInstance:"Add Instance",editInstance:"Edit Instance",instanceConfig:"Service Instance Configuration",networkConfig:"Network Configuration",selectServiceGroup:"Please select service group",selectLoadBalance:"Please select load balance strategy",serviceNamePlaceholder:"Please enter service name",serviceDescriptionPlaceholder:"Please enter service description",contextPathPlaceholder:"Please enter context path, e.g.: /api",healthCheckUrlPlaceholder:"Please enter health check URL, e.g.: /health",healthCheckIntervalPlaceholder:"Health check interval",healthCheckTimeoutPlaceholder:"Health check timeout",seconds:"seconds",cancel:"Cancel",reset:"Reset",submit:"Submit",serviceNameRequired:"Please enter service name",serviceNameLength:"Service name length should be between 2-50 characters",serviceGroupRequired:"Please select service group",instanceHostRequired:"Please enter instance host address",instancePortRequired:"Please enter instance port number",instanceStatusRequired:"Please select instance status",healthStatusRequired:"Please select health status",weightRequired:"Please enter weight value",serviceDescriptionLength:"Service description length cannot exceed 200 characters",protocolTypeRequired:"Please select protocol type",contextPathRequired:"Please enter context path",loadBalanceStrategyRequired:"Please select load balance strategy",healthCheckUrlRequired:"Please enter health check URL",healthCheckIntervalRequired:"Please enter health check interval",healthCheckTimeoutRequired:"Please enter health check timeout",healthCheckTypeRequired:"Please select health check type",healthCheckModeRequired:"Please select health check mode",addServiceSuccess:"Service added successfully",addServiceFailed:"Failed to add service",updateServiceSuccess:"Service updated successfully",updateServiceFailed:"Failed to update service",deleteServiceSuccess:"Service deleted successfully",deleteServiceFailed:"Failed to delete service",saveServiceBeforeAddingInstance:"Please save the service before adding instances",fetchServiceGroupsFailed:"Failed to fetch service groups",loadInstancesSuccess:"Instances loaded successfully",loadInstancesFailed:"Failed to load instances",addInstanceSuccess:"Instance added successfully",addInstanceFailed:"Failed to add instance",updateInstanceSuccess:"Instance updated successfully",updateInstanceFailed:"Failed to update instance",deleteInstanceSuccess:"Instance deleted successfully",deleteInstanceFailed:"Failed to delete instance",serviceManagement:"Service Management",advancedConfig:"Advanced Configuration",maxInstances:"Max Instances",maxInstancesPlaceholder:"Please enter max instances",activeFlagRequired:"Please select service status",maxInstancesRequired:"Please enter max instances",searchGroupName:"Search group name",selectGroupType:"Select group type",noServiceGroups:"No service groups available",selectedGroup:"Selected group",groupType:{BUSINESS:"Business Group",SYSTEM:"System Group",TEST:"Test Group"},registryTypes:{INTERNAL:"Internal Management",NACOS:"Nacos Registry",CONSUL:"Consul Registry",EUREKA:"Eureka Registry",ETCD:"ETCD Registry",ZOOKEEPER:"ZooKeeper Registry"},selectRegistryType:"Please select registry type",registryTypeSelection:"Registry Type Selection",serviceConfig:"Service Configuration",registryTypeRequired:"Please select registry type",columns:{serviceName:"Service Name",serviceGroupId:"Group ID",groupName:"Group Name",protocolType:"Protocol Type",loadBalanceStrategy:"Load Balance",instanceCount:"Instance Count",healthyInstanceCount:"Healthy Instances",activeFlag:"Status",addTime:"Created Time",editTime:"Updated Time",actions:"Actions",serviceInstanceId:"Instance ID",hostAddress:"Host Address",portNumber:"Port",contextPath:"Context Path",instanceStatus:"Instance Status",healthStatus:"Health Status",weightValue:"Weight",clientId:"Client ID",clientVersion:"Client Version",clientType:"Client Type",tempInstanceFlag:"Temporary Flag",registerTime:"Register Time",lastHeartbeatTime:"Last Heartbeat",lastHealthCheckTime:"Last Health Check"},status:{UP:"Up",DOWN:"Down",STARTING:"Starting",OUT_OF_SERVICE:"Out of Service",HEALTHY:"Healthy",UNHEALTHY:"Unhealthy",CHECKING:"Checking",UNKNOWN:"Unknown",JAVA:"Java",DOTNET:".NET",NODEJS:"Node.js",PYTHON:"Python",GO:"Go",OTHER:"Other",HTTP:"HTTP",HTTPS:"HTTPS",TCP:"TCP",UDP:"UDP",GRPC:"gRPC",ROUND_ROBIN:"Round Robin",WEIGHTED_ROUND_ROBIN:"Weighted Round Robin",LEAST_CONNECTIONS:"Least Connections",RANDOM:"Random",HASH:"Hash",Y:"Enabled",N:"Disabled",temporary:"Temporary Instance",permanent:"Permanent Instance"},actions:{view:"View",refresh:"Refresh",edit:"Edit",delete:"Delete",healthCheck:"Health Check",batchRefresh:"Batch Refresh",batchHealthCheck:"Batch Health Check",export:"Export",search:"Search",reset:"Reset",add:"Add Service",addInstance:"Add Instance",back:"Back",create:"Create",update:"Update",confirm:"Confirm",cancel:"Cancel",bringUp:"Bring Up",takeDown:"Take Down",viewEvents:"View Events"},search:{placeholder:{serviceName:"Enter service name",groupName:"Enter group name",hostAddress:"Enter host address",clientId:"Enter client ID"}},statistics:{totalServices:"Total Services",activeServices:"Active Services",inactiveServices:"Inactive Services",totalInstances:"Total Instances",healthyInstances:"Healthy Instances",unhealthyInstances:"Unhealthy Instances",upInstances:"Up Instances",downInstances:"Down Instances"},messages:{refreshSuccess:"Refresh successful",healthCheckSuccess:"Health check completed",batchRefreshSuccess:"Batch refresh successful",batchHealthCheckSuccess:"Batch health check completed",exportSuccess:"Export successful",loadError:"Failed to load data",refreshError:"Refresh failed",healthCheckError:"Health check failed",batchRefreshError:"Batch refresh failed",batchHealthCheckError:"Batch health check failed",exportError:"Export failed",noSelection:"Please select items to operate",confirmRefresh:"Confirm to refresh selected services?",confirmHealthCheck:"Confirm to perform health check?",confirmDeleteInstance:"Are you sure you want to delete this instance?",confirmDeleteService:"Are you sure you want to delete this service? This action will also delete all instances under this service and cannot be undone."},dialogs:{serviceDetail:{title:"Service Details",tabs:{basic:"Basic Info",instances:"Instance List",metadata:"Metadata",audit:"Audit Info"}}},table:{empty:"No data",loading:"Loading...",selectAll:"Select All",selected:"{count} items selected",heartbeatTimeout:"Heartbeat timeout",noInstances:"No instances",noHealthCheck:"Not checked yet"},time:{ago:"{time} ago",justNow:"Just now",seconds:"seconds",minutes:"minutes",hours:"hours",days:"days"},extensionConfig:"Extension Configuration",metadataAndTags:"Metadata and Tags",notesAndExtProperty:"Notes and Extension Property",reservedFields:"Reserved Fields",forFutureExpansion:"Future Expansion",groupName:"Group Name",groupNamePlaceholder:"Auto-filled from selected group",metadataJson:"Service Metadata",metadataJsonPlaceholder:'Please enter JSON format metadata, e.g.: {"version":"1.0","env":"prod"}',tagsJson:"Service Tags",tagsJsonPlaceholder:'Please enter JSON format tags, e.g.: ["web","api","microservice"]',noteText:"Notes",noteTextPlaceholder:"Please enter service notes",noteTextLength:"Notes cannot exceed 500 characters",extProperty:"Extension Property",extPropertyPlaceholder:"Please enter JSON format extension properties for future functionality",reservedField:"Reserved Field {number}",reservedFieldPlaceholder:"Reserved field {number} for future expansion",invalidJsonFormat:"Please enter valid JSON format",expand:"Expand",collapse:"Collapse",healthStatus:{excellent:"Excellent",good:"Good",warning:"Warning",critical:"Critical",offline:"Offline"},healthCheckModes:{active:"Active Detection",passive:"Passive Reporting"},serviceEventLog:"Service Event Log",fetchServiceEventsFailed:"Failed to fetch service events",getServiceEventFailed:"Failed to get service event details"};export{e as default};
